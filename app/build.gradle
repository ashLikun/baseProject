plugins {
    id 'com.android.application'
    // 使用Kotlin插件
    id 'kotlin-android'
    //kapt插件
    id 'kotlin-kapt'
}


def config = rootProject.ext.android // 工程配置
def sdk = rootProject.ext.sdk // SDK配置
def libs = rootProject.ext.dependencies // 库依赖
def moudles = rootProject.ext.modules //全部组件
//上传蒲公英
apply from: './upLoadPgy.gradle'

//滴滴开发助手插件,打开后每次升级其他第三方库，总是报类冲突
//apply from: '../dokit.gradle'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
//替换manifestPlaceholders default 里面的 applicationId 放入对应环境
def replaceManifestPlaceholdersAppId(String newAppid, String applicationIdSuffix, def map) {
    if (applicationIdSuffix != null && !applicationIdSuffix.isEmpty() && map != null && map instanceof Map) {
        println "开始替换 ManifestPlaceholder appId"
        String oldAppId = newAppid.replace("." + applicationIdSuffix, "")
        def config = rootProject.ext.android // 工程配置
        map.entrySet().forEach {
            if (it.value == oldAppId || it.value == config.applicationId) it.value = newAppid
        }
        (sdk.default as Map).entrySet().forEach {
            //强行插入新的
            if (it.value == oldAppId || it.value == config.applicationId) map.put(it.key, newAppid)
        }
    }
}

android {

    signingConfigs {
        release {
        }
        debug {
        }
    }
    rootProject.ext.loadSigningConfigs(this)
    compileSdk config.compileSdk
    defaultConfig {
        applicationId config.applicationId
        minSdk config.minSdk
        targetSdk config.targetSdk
        versionCode config.versionCode
        versionName config.versionName
        flavorDimensions config.flavorDimensions
        signingConfig signingConfigs.release
        ndk {
            //"x86"
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"/*, "x86", "x86_64"*/
        }
        // 适配默认语言"en-rUS"
//        resConfigs "en", "zh", "fr"
        resConfigs "zh"
        multiDexEnabled true
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        //向清单文件注入参数
        manifestPlaceholders = sdk.default
        //注入string，如果在代码中使用，就定义一个同key的string，这里会替换
        sdk.default.entrySet().forEach {
            resValue "string", it.key, it.value
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    buildTypes {
        release {
            //自定义属性   BuildConfig.LOG_DEBUG
            // buildConfigField "boolean", "LOG_DEBUG", "false"
            //构建的时候打印文本
            println 'build - release'
            debuggable false
            //设置是否混淆
            minifyEnabled true
            //设置压缩对齐
            zipAlignEnabled true
            //移除无用的资源文件
            shrinkResources true
            //设置混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //如果签名配置不为空 则设置签名信息
            if (signingConfigs.release != null) {
                signingConfig signingConfigs.release
            }
            //这里配置打包不同的参数
            manifestPlaceholders = sdk.releasBuild
            //注入string，如果在代码中使用，就定义一个同key的string，这里会替换
            sdk.releasBuild.entrySet().forEach {
                resValue "string", it.key, it.value
            }
        }
        beta.initWith(release)
        beta {
            //构建的时候打印文本
            println 'build - beta'
            //注入string，如果在代码中使用，就定义一个同key的string，这里会替换
            versionNameSuffix "-bate"
            //applicationIdSuffix-  Beta版本
            applicationIdSuffix "bate"
            //这里配置打包不同的参数
            manifestPlaceholders = sdk.betaBuild
            sdk.releasBuild.entrySet().forEach {
                resValue "string", it.key, it.value
            }
            //app名称
//            resValue "string", "my_app_name", "@string/my_app_name_beta"
        }
        debug {
            //自定义属性   BuildConfig.LOG_DEBUG
            //buildConfigField "boolean", "LOG_DEBUG", "false"
            //构建的时候打印文本
            println 'build - debug'
            debuggable true
            //设置是否混淆
            minifyEnabled false
            //设置压缩对齐
            zipAlignEnabled false
            //移除无用的资源文件
            shrinkResources false
            //设置混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //versionNameSuffix
            versionNameSuffix "-debug"
            //applicationIdSuffix-测试版本使用debug作为后缀
            applicationIdSuffix "bate"
            //这里配置打包不同的参数
            manifestPlaceholders = sdk.debugBuild
            //注入string，如果在代码中使用，就定义一个同key的string，这里会替换
            sdk.debugBuild.entrySet().forEach {
                resValue "string", it.key, it.value
            }
            if (signingConfigs.debug != null) {
                signingConfig signingConfigs.debug
            }

        }
    }
    /**
     * 指定签名包得输入文件名称
     * ApplicationVariantImpl变量访问地址
     * http://dcow.io/android-gradle-plugin-docs/index.html?overview-summary.html
     *
     * https://developer.android.google.cn/studio/build/build-variants?hl=zh-cn#groovy
     */
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.isDebuggable()) {
                outputFileName = "App-v${variant.versionName}-${releaseTime()}.apk"
            } else {
                outputFileName = "App-v${variant.versionName}-${releaseTime()}.apk"
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }

    // 这里配置AAB
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // feature APK.
            enableSplit = false
        }
        density {
            // This property is set to true by default.
            enableSplit = true
        }
        abi {
            // This property is set to true by default.
            enableSplit = true
        }
    }
}
//解析各个工程build.gradle之前会执行。
beforeEvaluate {

}
//这个方法回调在配置完成之后，也就是解析Build.gradle配置文件之后会执行，如果在配置文件，通过Extension的方式，配置了一些参数，如果想获取参数的值就需要在这个方法回调里边获取才行
afterEvaluate {
    project.android.applicationVariants.all { variant ->
        def map = variant.mergedFlavor.manifestPlaceholders as Map
        def newAppid = variant.applicationId
        //统一修改ApplicationId
        String applicationIdSuffix = variant.buildType.applicationIdSuffix
        if (applicationIdSuffix != null && !applicationIdSuffix.isEmpty()) {
            String oldAppId = newAppid.replace("." + applicationIdSuffix, "")
            map.entrySet().forEach {
                if (it.value == oldAppId || it.value == config.applicationId) it.value = newAppid
            }
        } else {
            map.entrySet().forEach {
                if (it.value == config.applicationId) it.value = newAppid
            }
        }
        println map
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //公共组件
    implementation project(':component_common')
    kapt libs.aroutercompiler
    kapt libs.glideCompiler
    //主模块
    if (!moudles.main.isRun) {
        implementation project(':module_main')
    }
    //用户模块
    if (!moudles.user.isRun) {
        implementation project(':module_user')
    }
    //登录模块
    if (!moudles.login.isRun) {
        implementation project(':module_login')
    }
    //其他模块
    if (!moudles.other.isRun) {
        implementation project(':module_other')
    }

}
repositories {
    mavenCentral()
}
