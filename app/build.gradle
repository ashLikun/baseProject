apply plugin: 'com.android.application'
def config = rootProject.ext.android // 工程配置
def sdk = rootProject.ext.sdk // SDK配置
def libs = rootProject.ext.dependencies // 库依赖
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def getApkFlavorsName(def variant) {
    return variant.productFlavors[0].name;
}

android {
    signingConfigs {
        release {
        }
        debug {
        }
    }
    dataBinding {
        enabled true
    }
    loadSigningConfigs()
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId "com.ashlikun.baseproject"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        flavorDimensions config.flavorDimensions
        signingConfig signingConfigs.release
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : sdk.JPUSH_APPKEY,
                JPUSH_CHANNEL: sdk.JPUSH_CHANNEL
        ]
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    buildTypes {
        release {
            //自定义属性   BuildConfig.LOG_DEBUG
            // buildConfigField "boolean", "LOG_DEBUG", "false"
            //构建的时候打印文本
            println 'build - release'
            debuggable false
            //设置是否混淆
            minifyEnabled false
            //设置压缩对齐
            zipAlignEnabled false
            //移除无用的资源文件
            shrinkResources false
            //设置混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //如果签名配置不为空 则设置签名信息
            if (signingConfigs.release != null) {
                signingConfig signingConfigs.release
            }
            //这里配置打包不同的参数
            manifestPlaceholders = rootProject.ext.releasBuild
        }
        debug {
            //自定义属性   BuildConfig.LOG_DEBUG
            //buildConfigField "boolean", "LOG_DEBUG", "false"
            //构建的时候打印文本
            println 'build - debug'
            debuggable true
            //设置是否混淆
            minifyEnabled false
            //设置压缩对齐
            zipAlignEnabled false
            //移除无用的资源文件
            shrinkResources false
            //设置混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //versionNameSuffix
            versionNameSuffix "_内测"
            //applicationIdSuffix-测试版本使用debug作为后缀
            applicationIdSuffix "debug"
            //这里配置打包不同的参数
            manifestPlaceholders = rootProject.ext.debugBuild
            if (signingConfigs.debug != null) {
                signingConfig signingConfigs.debug
            }

        }
    }
    /**
     * 指定签名包得输入文件名称
     */
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.isDebuggable()) {
                outputFileName = 'APP' + variant.versionName + releaseTime() + getApkFlavorsName(variant) + 'debug.apk'
            } else {
                outputFileName = 'APP' + variant.versionName + getApkFlavorsName(variant) + 'release.apk'
            }
        }
    }

    /**
     * aar文件的编译
     */
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    productFlavors {
        beta {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "beta"]
        }
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '27.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.design

    //基本架构
    implementation libs.CustomMvp
    implementation libs.multidex

    //alibaba的路由框架
    api libs.arouterapi
    annotationProcessor libs.aroutercompiler

    //6.0权限管理
    implementation(libs.permissionsdispatcher) {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }

    //权限插件
    annotationProcessor libs.permissionprocessor

    //基础的框架
    implementation 'com.github.ashLikun.frame:stickyrecyclerview:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:flatbutton:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:numberprogressbar:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:segmentcontrol:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:banner:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:charbar:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:supertoobar:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:scaleimageview:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:wheelview3d:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:badgeview:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:baseresource:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:animcheckbox:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:pathanim:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:glideutils:' + rootProject.ext.frameVersion
    implementation 'com.github.ashLikun.frame:superwebview:' + rootProject.ext.frameVersion

    //简单的PopupWindow
    implementation libs.EasyPopupWindow

    //事件总线
    implementation libs.EventBuss

    //    //图片GridView

    //    implementation 'com.github.ashLikun:ImageGridView:0.0.4'

    //数据库
    implementation libs.LiteOrm

    //封装的RecycleView
    implementation libs.XRecycleView

    //公共的工具
    implementation libs.CommonUtils

    //公共的Adapter
    implementation libs.CommonAdapter

    //阿里的vlayout
    implementation(libs.vlayout) {
        transitive = true
    }
    implementation libs.MultiTypeGson
    //习惯的对话框
    implementation libs.CustomDialog

    //布局切换
    implementation libs.LoadSwitch

    //兼容的View textview
    implementation libs.CompatView

    //错误捕获
    implementation libs.AppCrashDispose

    //shimmer 文字
    implementation libs.shimmer

    //导航tab
    implementation libs.BottomNavigation

    //rxjava
    implementation libs.rxandroid
    implementation libs.rxjava

    //okhttp
    implementation libs.okhttp
    implementation libs.gson

    //基于Okhttp封装的
    implementation libs.OkHttpUtils

    //图片加载
    compile libs.glide
    annotationProcessor libs.glideCompiler
    implementation libs.glideTransformations

    //md风格对话框
    implementation(libs.materialDialogs) {
        exclude group: 'com.android.support'
    }

    //Android官方流布局
    implementation libs.flexbox

    //    compile 'me.leolin:ShortcutBadger:1.1.4'

    //图片查看
    implementation libs.PhotoView

    //照片处理
    implementation libs.PhotoHander

    //友盟统计
    implementation libs.umeng
    implementation project(':libarouter')
}

/**
 * 加载签名配置文件
 */
def loadSigningConfigs() {
    def Properties props = new Properties()
    def propFile = file('../local.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('RELEASE_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
                props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_FILE'])
            android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
        } else {
            android.buildTypes.release.signingConfig = null
        }
        if (props != null && props.containsKey('DEBUG_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
                props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
            android.signingConfigs.debug.storeFile = file(props['DEBUG_STORE_FILE'])
            android.signingConfigs.debug.storePassword = props['RELEASE_STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = props['RELEASE_KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = props['RELEASE_KEY_PASSWORD']
        } else {
            android.buildTypes.debug.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }
}
