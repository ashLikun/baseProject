def currentModule = rootProject.ext.modules.main // 当前的module
if (currentModule.isRun) {
  apply plugin: 'com.android.application'
} else {
  apply plugin: 'com.android.library'
}
// 使用Kotlin插件
apply plugin: 'kotlin-android'
//kapt插件
apply plugin: 'kotlin-kapt'
def sdk = rootProject.ext.sdk // SDK配置
def config = rootProject.ext.android // 工程配置
def libs = rootProject.ext.dependencies // 库依赖
apply from: file('.././configs_module_common.gradle')
android {
  rootProject.ext.changRun(currentModule, sdk, config)
  compileSdk config.compileSdk
  defaultConfig {
    if (currentModule.isRun) {
      // 当前组件独立运行，需要设置applicationId,和主包的id不一样
      applicationId currentModule.applicationId
      //applicationIdSuffix ".main"
    }
    minSdk config.minSdk
    targetSdk config.targetSdk
    versionCode config.versionCode
    versionName config.versionName
    multiDexEnabled true
    kapt {
      arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
      }
    }
    //强制前缀，防止组件之间名称重复而替换
    resourcePrefix currentModule.name + "_"
    //向清单文件注入参数
    manifestPlaceholders = sdk
  }

  /**
   * java插件引入了一个概念叫做SourceSets 通过修改SourceSets中的属性
   * 可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除。
   */
  sourceSets {
    main {
      if (currentModule.isRun) {
        manifest.srcFile 'src/main/module/AndroidManifest.xml'
      } else {
        manifest.srcFile 'src/main/AndroidManifest.xml'
        java {
          //排除java/debug文件夹下的所有文件
          exclude 'com/ashlikun/baseproject/module/debug/**'
        }
      }

    }
  }
  compileOptions {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }
  viewBinding {
    enabled = true
  }

}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation project(':component_common')
  kapt libs.aroutercompiler
  kapt libs.glideCompiler
}
